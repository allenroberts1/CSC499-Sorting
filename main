import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.Arrays;
import java.util.Scanner;

public class CSC499Part1 {

    //Gets the list of names from a given file. Takes number of lines and file name
    static String[] getList(int fileLines, String fileName) {
        String[] nameList = new String[fileLines];

        int i = 0;
        String line = null;
        try {

            FileReader fileReader = new FileReader(fileName);
            BufferedReader bufferedReader = new BufferedReader(fileReader);

            while ((line = bufferedReader.readLine()) != null) {
                nameList[i] = line.trim();//Trims off any whitespace found in file
                i++;

            }
            bufferedReader.close();
        } catch (FileNotFoundException ex) {//Throws error when file isn't found
            System.out.println(
                    "Unable to open file '"
                    + fileName + "'");
        } catch (IOException ex) {
            System.out.println(
                    "Error reading file '"
                    + fileName + "'");

        }
        return nameList;//Returns the list of names from the file
    }

    //Gets the number of lines from the given file. Takes filename
    static int getFileSize(String fileName) {
        int numOfLines = 0;
        try {

            File file = new File(fileName);
            if (file.exists()) {

                FileReader fr = new FileReader(file);
                LineNumberReader lineReader = new LineNumberReader(fr);

                while (lineReader.readLine() != null) {//Stops when there are no lines left in file
                    numOfLines++;
                }

                lineReader.close();
            }
        } catch (IOException ex) {
            System.out.println(
                    "Error reading file '"
                    + fileName + "'");

        }
        return numOfLines;
    }

    //Uses merge sort to sort the names by length
    static void mergeSortList(String[] names, int l, int r, String[] temp) {
        if (l < r) {
            int mid = (l + r) / 2;
            mergeSortList(names, l, mid, temp);//Splits up the array into halves
            mergeSortList(names, mid + 1, r, temp);
            merge(names, temp, l, mid + 1, r);//Calls function to 

        }
    }

    //Sorts and merges the two halves of the array
    static void merge(String[] names, String[] temp, int left, int right, int size) {
        int leftEnd = right - 1;//End of the left half of array
        int tempPos = left;//Temporary position used when copying and sorting array
        int currentSize = size - left + 1; //size of current halves, used to copy back to original array

        //Sorts the Array
        while (right <= size && left <= leftEnd) {
            if (names[left].length() < names[right].length()) {
                temp[tempPos++] = names[left++];
            } else {
                temp[tempPos++] = names[right++];
            }
        }

        //Copies left side of array
        while (left <= leftEnd) {
            temp[tempPos++] = names[left++];
        }

        //Copies right side
        while (right <= size) {
            temp[tempPos++] = names[right++];
        }

        //Copies temporary array back to original
        for (int i = 0; i < currentSize; i++) {
            names[size] = temp[size];
            size--;
        }
    }

    public static void main(String[] args) throws Exception {
        Scanner in = new Scanner(System.in);
        String fileName, res;
        //Runs indefinitely to allow the user to sort as many files as needed
        while (true) {
            System.out.println("Enter file directory to sort file: ");//User enters a file directory to select what file they want sorted
            fileName = in.nextLine();
            int lineNum = getFileSize(fileName); // Grabs filesize of user's inputted file
            String[] names = getList(lineNum, fileName); // Grabs the list of words from inputted file to sort
            String[] tempNames = new String[lineNum];
            mergeSortList(names, 0, lineNum - 1, tempNames);
            
            //Overrides built in array sort function to only sort them if they are equal in length
            Arrays.sort(names, (String a, String b) -> {
                if (a.length() == b.length()) {
                    return a.compareTo(b);
                }
                return 0;
            });
            
            for (int i = 0; i < names.length; i++) {
                System.out.println(names[i]);
            }
            System.out.println("");
        }
    }
}
